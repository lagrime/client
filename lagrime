#!/bin/bash

help_menu() {
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "  encrypt [data_file] [receiver]                                   Encrypt data using a public key"
    echo "  decrypt [data_file] [master]                                     Decrypt data using a private key"
    echo "  generate                                                         Generate a new key pair"
    echo "  register [private_key] [public_key] [user_name] [server_address] Register a new key pair to a server"
    echo "  fetch [receiver]                                                 Fetch the public key of a user from a server"
    echo "  reset [address] [private_key_file] [new_public_key_file]         Reset your public key on a server"
    echo "  help, -h, --help                                                 Shows this help message"
}

reset_public_key() {
    address=$1
    private_key_file=$2
    new_public_key_file=$3

    if [[ -z "$address" ]]; then
        echo "Error: Address not found."
        exit 1
    fi

    if [[ ! -f "$private_key_file" ]]; then
        echo "Error: Private key file not found."
        exit 1
    fi

    if [[ ! -f "$new_public_key_file" ]]; then
        echo "Error: New public key file not found."
        exit 1
    fi

    user_name="${address%%@*}"
    server_address="${address#*@}"
    private_key=$(cat "$private_key_file")

    auth_response=$(curl -s -X POST "$server_address/auth/hello" -d "user=$user_name")
    challenge=$(jq -r '.encrypted_challenge' <<< "$auth_response")

    decrypted_challenge=$(openssl pkeyutl -decrypt -in <(echo "$challenge") -inkey "$private_key")
    curl -s -X POST "$server_address/auth/complete" -d "user=$user_name&decrypted_challenge=$decrypted_challenge"
    access_token=$(jq -r '.access_token' <<< "$auth_response")

    curl -s -X POST "$server_address/set/public-key" -d "token=$access_token&new_key=$(cat "$new_public_key_file")"
}

fetch_public_key() {
    receiver_address=$1

    if [[ -z "$receiver_address" ]]; then
        echo "Error: Receiver not found."
        exit 1
    fi

    receiver_name="${receiver_address%%@*}"
    receiver_server="${receiver_address#*@}"
    public_key_json=$(curl -s "$receiver_server/get/public-key?key-user=$receiver_name")
    public_key=$(jq -r '.public_key' <<< "$public_key_json")
    echo "$public_key" > "$receiver_name.pub"
}

generate_and_register_keypair() {
    private_key_file=$1
    public_key_file=$2
    user_name=$3
    server_address=$4

    if [[ ! -f "$private_key_file" ]]; then
        echo "Error: Private key file not found."
        exit 1
    fi

    if [[ ! -f "$public_key_file" ]]; then
        echo "Error: Public key file not found."
        exit 1
    fi

    if [[ -z "$user_name" ]]; then
        echo "Error: User name not found."
        exit 1
    fi

    if [[ -z "$server_address" ]]; then
        echo "Error: Server address not found."
        exit 1
    fi

    public_key=$(cat "$public_key_file")
    curl -s -X POST "$server_address/register/" -d "user_name=$user_name&public_key=$public_key"
}

generate_keypair() {
    openssl genpkey -algorithm RSA -out private_key.pem
    openssl rsa -pubout -in private_key.pem -out public_key.pem
}

encrypt_data() {
    data_file=$1
    receiver_address=$2

    if [[ ! -f "$data_file" ]]; then
        echo "Error: Data file not found."
        exit 1
    fi

    if [[ -z "$receiver_address" ]]; then
        echo "Error: Receiver not found."
        exit 1
    fi

    encrypted_file="${data_file}.enc"

    receiver_name="${receiver_address%%@*}"
    receiver_server="${receiver_address#*@}"
    public_key_json=$(curl -s "$receiver_server/get/public-key?key-user=$receiver_name")
    public_key=$(jq -r '.public_key' <<< "$public_key_json")

    openssl pkeyutl -encrypt -in "$data_file" -pubin -inkey <(echo "$public_key") -out "$encrypted_file"
    echo "Encryption successful. Encrypted data saved as $encrypted_file"
}

decrypt_data() {
    data_file=$1
    private_key_file=$2

    if [[ ! -f "$data_file" ]]; then
        echo "Error: Data file not found."
        exit 1
    fi

    if [[ ! -f "$private_key_file" ]]; then
        echo "Error: Private key file not found."
        exit 1
    fi

    decrypted_file="${data_file}.dec"

    openssl pkeyutl -decrypt -in "$data_file" -inkey "$private_key_file" -out "$decrypted_file"
    echo "Decryption successful. Decrypted data saved as $decrypted_file"
}

if [[ $# -eq 0 || "$1" == "help" || "$1" == "-h" || "$1" == "--help" ]]; then
    help_menu
    exit 0
fi

command=$1
shift

case "$command" in
    encrypt)
        encrypt_data "$1" "$2"
        ;;
    generate)
        generate_keypair
        ;;
    decrypt)
        decrypt_data "$1" "$2"
        ;;
    *)
        echo "Error: Invalid option."
        help_menu
        exit 1
        ;;
esac
